
Room_Light Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ba  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000714  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e0  00000000  00000000  00001466  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00001a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fa  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000416  00000000  00000000  00002002  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_1>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 15 01 	jmp	0x22a	; 0x22a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <int1_init>:

#include "interrupt.h"

void int1_init()
{
	clearbit(DDRD,0);    // set pin as INPUT //3
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	81 bb       	out	0x11, r24	; 17
	setbit(MCUCR,ISC11); // The rising edge of INT1 generates an interrupt request.
  72:	85 b7       	in	r24, 0x35	; 53
  74:	88 60       	ori	r24, 0x08	; 8
  76:	85 bf       	out	0x35, r24	; 53
	setbit(MCUCR,ISC10); // The rising edge of INT1 generates an interrupt request.
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	85 bf       	out	0x35, r24	; 53
	setbit(GICR,INT1);   // external interrupt  EN  INT1
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8b bf       	out	0x3b, r24	; 59
	sei();               // global interrupt EN
  84:	78 94       	sei
  86:	08 95       	ret

00000088 <int0_init>:



void int0_init()
{
	clearbit(DDRD,2);    // set pin as INPUT
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	8b 7f       	andi	r24, 0xFB	; 251
  8c:	81 bb       	out	0x11, r24	; 17
	setbit(MCUCR,ISC01); // The rising edge of INT1 generates an interrupt request.
  8e:	85 b7       	in	r24, 0x35	; 53
  90:	82 60       	ori	r24, 0x02	; 2
  92:	85 bf       	out	0x35, r24	; 53
	setbit(MCUCR,ISC00); //The rising edge of INT1 generates an interrupt request.
  94:	85 b7       	in	r24, 0x35	; 53
  96:	81 60       	ori	r24, 0x01	; 1
  98:	85 bf       	out	0x35, r24	; 53
	setbit(GICR,INT0);   // external interrupt  EN INT0
  9a:	8b b7       	in	r24, 0x3b	; 59
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	8b bf       	out	0x3b, r24	; 59
	sei();               // global interrupt EN
  a0:	78 94       	sei
  a2:	08 95       	ret

000000a4 <main>:
#include "interrupt.h"


int main(void)
{
	UART_INIT(103);      // init baud = 9600
  a4:	87 e6       	ldi	r24, 0x67	; 103
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 06 01 	call	0x20c	; 0x20c <UART_INIT>
	int1_init();        
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <int1_init>
	int0_init();
  b0:	0e 94 44 00 	call	0x88	; 0x88 <int0_init>
	
	setbit(DDRA,6);
  b4:	8a b3       	in	r24, 0x1a	; 26
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	8a bb       	out	0x1a, r24	; 26
	setbit(DDRA,7);
  ba:	8a b3       	in	r24, 0x1a	; 26
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	8a bb       	out	0x1a, r24	; 26
	
	setbit(DDRD,5);  
  c0:	81 b3       	in	r24, 0x11	; 17
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	81 bb       	out	0x11, r24	; 17
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x22>

000000c8 <__vector_2>:
    }
	
}

ISR(INT1_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	4f 93       	push	r20
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
	//DDRC=0XFF;
	UART_sendchar('o');// Open Switch
  ea:	8f e6       	ldi	r24, 0x6F	; 111
  ec:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendchar>
	
	setbit(PORTA,7);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	81 ee       	ldi	r24, 0xE1	; 225
  fa:	94 e0       	ldi	r25, 0x04	; 4
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <__vector_2+0x34>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__vector_2+0x3e>
 106:	00 00       	nop
	_delay_ms(100);
	clearbit(PORTA,7);
 108:	8b b3       	in	r24, 0x1b	; 27
 10a:	8f 77       	andi	r24, 0x7F	; 127
 10c:	8b bb       	out	0x1b, r24	; 27
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	81 ee       	ldi	r24, 0xE1	; 225
 112:	94 e0       	ldi	r25, 0x04	; 4
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <__vector_2+0x4c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <__vector_2+0x56>
 11e:	00 00       	nop
	_delay_ms(100);
	
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
 120:	82 e8       	ldi	r24, 0x82	; 130
 122:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS11);
 124:	8a e1       	ldi	r24, 0x1A	; 26
 126:	8e bd       	out	0x2e, r24	; 46
	ICR1=39999;  //fPWM=50Hz (Period = 20ms Standard).
 128:	8f e3       	ldi	r24, 0x3F	; 63
 12a:	9c e9       	ldi	r25, 0x9C	; 156
 12c:	97 bd       	out	0x27, r25	; 39
 12e:	86 bd       	out	0x26, r24	; 38
	TCNT1=0;
 130:	1d bc       	out	0x2d, r1	; 45
 132:	1c bc       	out	0x2c, r1	; 44
	//DDRB|=(1<<PORTB4)|(1<<PORTB5); //PWM Pins as Out
	setbit(DDRB,1);
 134:	87 b3       	in	r24, 0x17	; 23
 136:	82 60       	ori	r24, 0x02	; 2
 138:	87 bb       	out	0x17, r24	; 23
	setbit(DDRB,5);
 13a:	87 b3       	in	r24, 0x17	; 23
 13c:	80 62       	ori	r24, 0x20	; 32
 13e:	87 bb       	out	0x17, r24	; 23
	OCR1A=(5250);
 140:	82 e8       	ldi	r24, 0x82	; 130
 142:	94 e1       	ldi	r25, 0x14	; 20
 144:	9b bd       	out	0x2b, r25	; 43
 146:	8a bd       	out	0x2a, r24	; 42
	
	
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_1>:

ISR(INT0_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	//DDRC=0XFF;
	//int x;
	UART_sendchar('c'); // Close Switch
 18c:	83 e6       	ldi	r24, 0x63	; 99
 18e:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_sendchar>
	
	
	setbit(PORTA,6);
 192:	8b b3       	in	r24, 0x1b	; 27
 194:	80 64       	ori	r24, 0x40	; 64
 196:	8b bb       	out	0x1b, r24	; 27
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	81 ee       	ldi	r24, 0xE1	; 225
 19c:	94 e0       	ldi	r25, 0x04	; 4
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <__vector_1+0x34>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <__vector_1+0x3e>
 1a8:	00 00       	nop
	_delay_ms(100);
	clearbit(PORTA,6);
 1aa:	8b b3       	in	r24, 0x1b	; 27
 1ac:	8f 7b       	andi	r24, 0xBF	; 191
 1ae:	8b bb       	out	0x1b, r24	; 27
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	81 ee       	ldi	r24, 0xE1	; 225
 1b4:	94 e0       	ldi	r25, 0x04	; 4
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <__vector_1+0x4c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <__vector_1+0x56>
 1c0:	00 00       	nop
	_delay_ms(100);
	
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
 1c2:	82 e8       	ldi	r24, 0x82	; 130
 1c4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS11);
 1c6:	8a e1       	ldi	r24, 0x1A	; 26
 1c8:	8e bd       	out	0x2e, r24	; 46
	ICR1=39999;  //fPWM=50Hz (Period = 20ms Standard).
 1ca:	8f e3       	ldi	r24, 0x3F	; 63
 1cc:	9c e9       	ldi	r25, 0x9C	; 156
 1ce:	97 bd       	out	0x27, r25	; 39
 1d0:	86 bd       	out	0x26, r24	; 38
	TCNT1=0;
 1d2:	1d bc       	out	0x2d, r1	; 45
 1d4:	1c bc       	out	0x2c, r1	; 44
	//DDRB|=(1<<PORTB4)|(1<<PORTB5); //PWM Pins as Out
	setbit(DDRB,1);
 1d6:	87 b3       	in	r24, 0x17	; 23
 1d8:	82 60       	ori	r24, 0x02	; 2
 1da:	87 bb       	out	0x17, r24	; 23
	setbit(DDRB,5);
 1dc:	87 b3       	in	r24, 0x17	; 23
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	87 bb       	out	0x17, r24	; 23
	OCR1A=(1600);
 1e2:	80 e4       	ldi	r24, 0x40	; 64
 1e4:	96 e0       	ldi	r25, 0x06	; 6
 1e6:	9b bd       	out	0x2b, r25	; 43
 1e8:	8a bd       	out	0x2a, r24	; 42
	
	
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <UART_INIT>:
#include "UART.h"

void UART_INIT(unsigned int baud)
{
	// 8 bit data 1 stop bit
	UCSRB |= (1 << RXEN) | (1 << TXEN);	// Enable UART transmitter and receiver
 20c:	2a b1       	in	r18, 0x0a	; 10
 20e:	28 61       	ori	r18, 0x18	; 24
 210:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	//8 bit data and 1 stop bit
 212:	20 b5       	in	r18, 0x20	; 32
 214:	26 68       	ori	r18, 0x86	; 134
 216:	20 bd       	out	0x20, r18	; 32
	UBRRL = baud;//lower
 218:	89 b9       	out	0x09, r24	; 9
	UBRRH = (baud >> 8);//higher
 21a:	90 bd       	out	0x20, r25	; 32
 21c:	08 95       	ret

0000021e <UART_sendchar>:

void UART_sendchar(unsigned char data)
{   // 1-check empty or not
	// 2-udr data register for send or recive
	// 3-check data send
	while(readbit(UCSRA,UDRE)==0)// wait the reg to be empty
 21e:	5d 9b       	sbis	0x0b, 5	; 11
 220:	fe cf       	rjmp	.-4      	; 0x21e <UART_sendchar>
	{		}
	UDR = data; // send  data
 222:	8c b9       	out	0x0c, r24	; 12
	while(readbit(UCSRA,TXC)==0)// wait till the data to be send
 224:	5e 9b       	sbis	0x0b, 6	; 11
 226:	fe cf       	rjmp	.-4      	; 0x224 <UART_sendchar+0x6>
	{		}
}
 228:	08 95       	ret

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
