
Room_light_Switch_Receive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000964  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000723  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000064e  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00001ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040a  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a4  00000000  00000000  0000209a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000243e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_1>
   8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <int1_init>:

#include "interrupt.h"

void int1_init()
{
	clearbit(DDRD,3);    // set pin as INPUT //3
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	87 7f       	andi	r24, 0xF7	; 247
  70:	81 bb       	out	0x11, r24	; 17
	setbit(MCUCR,ISC11); // The rising edge of INT1 generates an interrupt request.
  72:	85 b7       	in	r24, 0x35	; 53
  74:	88 60       	ori	r24, 0x08	; 8
  76:	85 bf       	out	0x35, r24	; 53
	setbit(MCUCR,ISC10); // The rising edge of INT1 generates an interrupt request.
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	85 bf       	out	0x35, r24	; 53
	setbit(GICR,INT1);   // external interrupt  EN  INT1
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8b bf       	out	0x3b, r24	; 59
	sei();               // global interrupt EN
  84:	78 94       	sei
  86:	08 95       	ret

00000088 <int0_init>:
}


void int0_init()
{
	clearbit(DDRD,2);    // set pin as INPUT
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	8b 7f       	andi	r24, 0xFB	; 251
  8c:	81 bb       	out	0x11, r24	; 17
	setbit(MCUCR,ISC01); // The rising edge of INT1 generates an interrupt request.
  8e:	85 b7       	in	r24, 0x35	; 53
  90:	82 60       	ori	r24, 0x02	; 2
  92:	85 bf       	out	0x35, r24	; 53
	setbit(MCUCR,ISC00); //The rising edge of INT1 generates an interrupt request.
  94:	85 b7       	in	r24, 0x35	; 53
  96:	81 60       	ori	r24, 0x01	; 1
  98:	85 bf       	out	0x35, r24	; 53
	setbit(GICR,INT0);   // external interrupt  EN INT0
  9a:	8b b7       	in	r24, 0x3b	; 59
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	8b bf       	out	0x3b, r24	; 59
	sei();               // global interrupt EN
  a0:	78 94       	sei
  a2:	08 95       	ret

000000a4 <main>:
#include "UART.h"
#include "interrupt.h"

int main(void)
{
	UART_INIT(103);
  a4:	87 e6       	ldi	r24, 0x67	; 103
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 32 01 	call	0x264	; 0x264 <UART_INIT>
	int1_init();
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <int1_init>
	int0_init();
  b0:	0e 94 44 00 	call	0x88	; 0x88 <int0_init>
	unsigned char x;
	
	setbit(DDRC,6); // Open RED LED
  b4:	84 b3       	in	r24, 0x14	; 20
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	84 bb       	out	0x14, r24	; 20
	setbit(DDRC,5); // Close LED
  ba:	84 b3       	in	r24, 0x14	; 20
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	84 bb       	out	0x14, r24	; 20
	setbit(DDRA,6); // Testing LEDs
  c0:	8a b3       	in	r24, 0x1a	; 26
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8a bb       	out	0x1a, r24	; 26
	setbit(DDRA,7);// Testing LEDs
  c6:	8a b3       	in	r24, 0x1a	; 26
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	8a bb       	out	0x1a, r24	; 26
	
    setbit(DDRB,1);
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	87 bb       	out	0x17, r24	; 23
	
	setbit(DDRD,5); // OUTPUT for Servo Motor
  d2:	81 b3       	in	r24, 0x11	; 17
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	81 bb       	out	0x11, r24	; 17
	


	while (1)
	{
	    x = UART_receivechar();
  d8:	0e 94 41 01 	call	0x282	; 0x282 <UART_receivechar>
		//UART_sendchar(x);
		//Controlling From Mobile Pone (Bluetooth Application) :
		
		if (x == 'o') // Open Switch INT1 111 ASCI
  dc:	8f 36       	cpi	r24, 0x6F	; 111
  de:	d9 f4       	brne	.+54     	; 0x116 <main+0x72>
		{
			setbit(PORTC,6);  // Alarm RED LED (On)
  e0:	85 b3       	in	r24, 0x15	; 21
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	85 bb       	out	0x15, r24	; 21
			clearbit(PORTC,5);  // Green LED   (off)
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	8f 7d       	andi	r24, 0xDF	; 223
  ea:	85 bb       	out	0x15, r24	; 21
		
			TCCR1A = (1<<WGM11)|(1<<COM1A1);
  ec:	82 e8       	ldi	r24, 0x82	; 130
  ee:	8f bd       	out	0x2f, r24	; 47
			TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS11);
  f0:	8a e1       	ldi	r24, 0x1A	; 26
  f2:	8e bd       	out	0x2e, r24	; 46
			ICR1=39999;  //fPWM=50Hz (Period = 20ms Standard).
  f4:	8f e3       	ldi	r24, 0x3F	; 63
  f6:	9c e9       	ldi	r25, 0x9C	; 156
  f8:	97 bd       	out	0x27, r25	; 39
  fa:	86 bd       	out	0x26, r24	; 38
			TCNT1=0;
  fc:	1d bc       	out	0x2d, r1	; 45
  fe:	1c bc       	out	0x2c, r1	; 44
			//DDRB|=(1<<PORTB4)|(1<<PORTB5); //PWM Pins as Out
			setbit(DDRB,1); 
 100:	87 b3       	in	r24, 0x17	; 23
 102:	82 60       	ori	r24, 0x02	; 2
 104:	87 bb       	out	0x17, r24	; 23
			setbit(DDRB,5); 
 106:	87 b3       	in	r24, 0x17	; 23
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	87 bb       	out	0x17, r24	; 23
			OCR1A=(1200);//5250 //2100 //1900
 10c:	80 eb       	ldi	r24, 0xB0	; 176
 10e:	94 e0       	ldi	r25, 0x04	; 4
 110:	9b bd       	out	0x2b, r25	; 43
 112:	8a bd       	out	0x2a, r24	; 42
 114:	e1 cf       	rjmp	.-62     	; 0xd8 <main+0x34>
				
		}
		
		
		else if (x == 'c') // Close Switch INT0 //99 ASCI
 116:	83 36       	cpi	r24, 0x63	; 99
 118:	f9 f6       	brne	.-66     	; 0xd8 <main+0x34>
		{
			setbit(PORTC,5);  // Green LED
 11a:	85 b3       	in	r24, 0x15	; 21
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	85 bb       	out	0x15, r24	; 21
			clearbit(PORTC,6);  // Alarm RED LED
 120:	85 b3       	in	r24, 0x15	; 21
 122:	8f 7b       	andi	r24, 0xBF	; 191
 124:	85 bb       	out	0x15, r24	; 21
			
			setbit(PORTA,6);
 126:	8b b3       	in	r24, 0x1b	; 27
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	81 ee       	ldi	r24, 0xE1	; 225
 130:	94 e0       	ldi	r25, 0x04	; 4
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x8e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x98>
 13c:	00 00       	nop
			_delay_ms(100);
			clearbit(PORTA,6);
 13e:	8b b3       	in	r24, 0x1b	; 27
 140:	8f 7b       	andi	r24, 0xBF	; 191
 142:	8b bb       	out	0x1b, r24	; 27
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	81 ee       	ldi	r24, 0xE1	; 225
 148:	94 e0       	ldi	r25, 0x04	; 4
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0xa6>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0xb0>
 154:	00 00       	nop
			_delay_ms(100);
			
			TCCR1A = (1<<WGM11)|(1<<COM1A1);
 156:	82 e8       	ldi	r24, 0x82	; 130
 158:	8f bd       	out	0x2f, r24	; 47
			TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS11);
 15a:	8a e1       	ldi	r24, 0x1A	; 26
 15c:	8e bd       	out	0x2e, r24	; 46
			ICR1=39999; //fPWM=50Hz (Period = 20ms Standard).
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9c e9       	ldi	r25, 0x9C	; 156
 162:	97 bd       	out	0x27, r25	; 39
 164:	86 bd       	out	0x26, r24	; 38
			TCNT1=0;
 166:	1d bc       	out	0x2d, r1	; 45
 168:	1c bc       	out	0x2c, r1	; 44
			//DDRB|=(1<<PORTB4)|(1<<PORTB5); //PWM Pins as Out
			setbit(DDRB,1);
 16a:	87 b3       	in	r24, 0x17	; 23
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	87 bb       	out	0x17, r24	; 23
			setbit(DDRB,5);
 170:	87 b3       	in	r24, 0x17	; 23
 172:	80 62       	ori	r24, 0x20	; 32
 174:	87 bb       	out	0x17, r24	; 23
			OCR1A=(840);//1600	//1500 //1800  // so far ok
 176:	88 e4       	ldi	r24, 0x48	; 72
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	9b bd       	out	0x2b, r25	; 43
 17c:	8a bd       	out	0x2a, r24	; 42
 17e:	ac cf       	rjmp	.-168    	; 0xd8 <main+0x34>

00000180 <__vector_2>:


// Controlling By Interrupts Push Buttons:

ISR(INT1_vect)
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	
	UART_sendchar('o');// Open Switch
 1a2:	8f e6       	ldi	r24, 0x6F	; 111
 1a4:	0e 94 3b 01 	call	0x276	; 0x276 <UART_sendchar>
	
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
 1a8:	82 e8       	ldi	r24, 0x82	; 130
 1aa:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS11);
 1ac:	8a e1       	ldi	r24, 0x1A	; 26
 1ae:	8e bd       	out	0x2e, r24	; 46
	ICR1=39999;  //fPWM=50Hz (Period = 20ms Standard).
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	9c e9       	ldi	r25, 0x9C	; 156
 1b4:	97 bd       	out	0x27, r25	; 39
 1b6:	86 bd       	out	0x26, r24	; 38
	TCNT1=0;
 1b8:	1d bc       	out	0x2d, r1	; 45
 1ba:	1c bc       	out	0x2c, r1	; 44
	//DDRB|=(1<<PORTB4)|(1<<PORTB5); //PWM Pins as Out
	setbit(DDRB,1);
 1bc:	87 b3       	in	r24, 0x17	; 23
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	87 bb       	out	0x17, r24	; 23
	setbit(DDRB,5);
 1c2:	87 b3       	in	r24, 0x17	; 23
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	87 bb       	out	0x17, r24	; 23
	OCR1A=(1200);//5250 //2100 //1900
 1c8:	80 eb       	ldi	r24, 0xB0	; 176
 1ca:	94 e0       	ldi	r25, 0x04	; 4
 1cc:	9b bd       	out	0x2b, r25	; 43
 1ce:	8a bd       	out	0x2a, r24	; 42
	
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__vector_1>:

ISR(INT0_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	
	UART_sendchar('c'); // Close Switch
 214:	83 e6       	ldi	r24, 0x63	; 99
 216:	0e 94 3b 01 	call	0x276	; 0x276 <UART_sendchar>
	
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
 21a:	82 e8       	ldi	r24, 0x82	; 130
 21c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS11);
 21e:	8a e1       	ldi	r24, 0x1A	; 26
 220:	8e bd       	out	0x2e, r24	; 46
	ICR1=39999; //fPWM=50Hz (Period = 20ms Standard).
 222:	8f e3       	ldi	r24, 0x3F	; 63
 224:	9c e9       	ldi	r25, 0x9C	; 156
 226:	97 bd       	out	0x27, r25	; 39
 228:	86 bd       	out	0x26, r24	; 38
	TCNT1=0;
 22a:	1d bc       	out	0x2d, r1	; 45
 22c:	1c bc       	out	0x2c, r1	; 44
	//DDRB|=(1<<PORTB4)|(1<<PORTB5); //PWM Pins as Out
	setbit(DDRB,1);
 22e:	87 b3       	in	r24, 0x17	; 23
 230:	82 60       	ori	r24, 0x02	; 2
 232:	87 bb       	out	0x17, r24	; 23
	setbit(DDRB,5);
 234:	87 b3       	in	r24, 0x17	; 23
 236:	80 62       	ori	r24, 0x20	; 32
 238:	87 bb       	out	0x17, r24	; 23
	OCR1A=(840);//1600	//1500 //1800  // so far ok
 23a:	88 e4       	ldi	r24, 0x48	; 72
 23c:	93 e0       	ldi	r25, 0x03	; 3
 23e:	9b bd       	out	0x2b, r25	; 43
 240:	8a bd       	out	0x2a, r24	; 42
	
}
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <UART_INIT>:
#include "UART.h"

void UART_INIT(unsigned int baud)
{
	// 8 bit data 1 stop bit
	UCSRB |= (1 << RXEN) | (1 << TXEN);	// Enable UART transmitter and receiver
 264:	2a b1       	in	r18, 0x0a	; 10
 266:	28 61       	ori	r18, 0x18	; 24
 268:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	//8 bit data and 1 stop bit
 26a:	20 b5       	in	r18, 0x20	; 32
 26c:	26 68       	ori	r18, 0x86	; 134
 26e:	20 bd       	out	0x20, r18	; 32
	UBRRL = baud;//lower
 270:	89 b9       	out	0x09, r24	; 9
	UBRRH = (baud >> 8);//higher
 272:	90 bd       	out	0x20, r25	; 32
 274:	08 95       	ret

00000276 <UART_sendchar>:

void UART_sendchar(unsigned char data)
{   // 1-check empty or not
	// 2-udr data register for send or recive
	// 3-check data send
	while(readbit(UCSRA,UDRE)==0)// wait the reg to be empty
 276:	5d 9b       	sbis	0x0b, 5	; 11
 278:	fe cf       	rjmp	.-4      	; 0x276 <UART_sendchar>
	{		}
	UDR = data; // send  data
 27a:	8c b9       	out	0x0c, r24	; 12
	while(readbit(UCSRA,TXC)==0)// wait till the data to be send
 27c:	5e 9b       	sbis	0x0b, 6	; 11
 27e:	fe cf       	rjmp	.-4      	; 0x27c <UART_sendchar+0x6>
	{		}
}
 280:	08 95       	ret

00000282 <UART_receivechar>:

unsigned char UART_receivechar()
{
	while(readbit(UCSRA,RXC)==0) // wait the data to be receive
 282:	5f 9b       	sbis	0x0b, 7	; 11
 284:	fe cf       	rjmp	.-4      	; 0x282 <UART_receivechar>
	{	;	}
	
	return UDR;// data source for variables
 286:	8c b1       	in	r24, 0x0c	; 12
}
 288:	08 95       	ret

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
